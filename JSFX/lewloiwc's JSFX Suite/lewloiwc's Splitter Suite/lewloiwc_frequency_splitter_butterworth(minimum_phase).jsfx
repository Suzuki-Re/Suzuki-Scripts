NoIndex: true
desc:Frequency Splitter - Butterworth (lewloiwc)
tags: minimum phase frequency splitter
version: 1.0.0
author: lewloiwc
changelog: Initial Release
License: CC0
about: 
  # Butterworth Splitter (Minimum Phase)
  Butterworth has a crossover point of -3 dB. This causes it to behave a little differently than Linkwitz-Riley.
  [6 dB/oct](https://i.imgur.com/PNpufua.png), [18 dB/oct](https://i.imgur.com/377olVl.png), [30 dB/oct](https://i.imgur.com/4X59dkD.png), and [42 dB/oct](https://i.imgur.com/Cuu9HOl.png).
  This can also be set to a different slope for each crossover point, for example [6 dB/oct and 30 dB/oct](https://i.imgur.com/7HauoZ8.png).

slider1:frequency_a_slider=90<20,20000,1>Crossover Frequency A [Hz]
slider2:slope_a_slider=1<0,3,1{6,18,30,42}>Slope A
slider3:frequency_b_slider=2500<20,20000,1>Crossover Frequency B [Hz]
slider4:slope_b_slider=1<0,3,1{6,18,30,42}>Slope B

slider41:ext_nodenorm_slider=0<0,1,1{0,1}>ext_nodenorm

in_pin:Input L
in_pin:Input R
out_pin:Output Low L
out_pin:Output Low R
out_pin:Output Mid L
out_pin:Output Mid R
out_pin:Output High L
out_pin:Output High R

import more_math_functions.jsfx-inc
//import more_graphics.jsfx-inc



@init //----------------------------------------------------------------

ext_nodenorm = ext_nodenorm_slider;

function LR_LPF(x,freq,slope)
(
    //6
        slope === 0 ? (
            x = this.SVFOPlpf_temp(x,freq);
        ) :
    //18
        slope === 1 ? (
            x = this.1.SVFlow(x,freq,1);
            x = this.2.SVFOPlpf_temp(x,freq);
        ) :
    //30
        slope === 2 ? (
            x = this.1.SVFlow(x,freq,q30_1);
            x = this.2.SVFlow(x,freq,q30_2);
            x = this.3.SVFOPlpf_temp(x,freq);
        ) :
    //42
        slope === 3 ? (
            x = this.1.SVFlow(x,freq,q42_1);
            x = this.2.SVFlow(x,freq,q42_2);
            x = this.3.SVFlow(x,freq,q42_3);
            x = this.4.SVFOPlpf_temp(x,freq);
        );
);

function LR_HPF(x,freq,slope)
(
    //6
        slope === 0 ? (
            x = this.SVFOPhpf_temp(x,freq);
        ) :
    //18
        slope === 1 ? (
            x = this.1.SVFhigh(x,freq,1);
            x = this.2.SVFOPhpf_temp(x,freq);
        ) :
    //30
        slope === 2 ? (
            x = this.1.SVFhigh(x,freq,q30_1);
            x = this.2.SVFhigh(x,freq,q30_2);
            x = this.3.SVFOPhpf_temp(x,freq);
        ) :
    //42
        slope === 3 ? (
            x = this.1.SVFhigh(x,freq,q42_1);
            x = this.2.SVFhigh(x,freq,q42_2);
            x = this.3.SVFhigh(x,freq,q42_3);
            x = this.4.SVFOPhpf_temp(x,freq);
        );
);

function APF(x,freq,slope)
(
    //6
        slope === 0 ? (
            x = x;
        ) :
    //18
        slope === 1 ? (
            x = this.SVFall(x,freq,1);
        ) :
    //30
        slope === 2 ? (
            x = this.SVFall(x,freq,q30_1);
        ) :
    //42
        slope === 3 ? (
            x = this.1.SVFall(x,freq,q42a_1);
            x = this.2.SVFall(x,freq,q42a_2);
        );
);

function frequency_splitter(x)
(
    //Low
        this.L = this.Low_A.LR_LPF(x,frequency_a_slider,slope_a_slider);
        this.L = this.Low_B.LR_LPF(this.L,frequency_b_slider,slope_b_slider);
    //Mid
        this.M = this.Mid_A.LR_HPF(x,frequency_a_slider,slope_a_slider);
        this.M = this.Mid_B.LR_LPF(this.M,frequency_b_slider,slope_b_slider);
    //High
        this.H = this.High_A.APF(x,frequency_a_slider,slope_a_slider);
        this.H = this.High_B.LR_HPF(this.H,frequency_b_slider,slope_b_slider);
);

q30_1 = 0.5/cos($pi/10*2);
q30_2 = 0.5/cos($pi/10*4);

q42_1 = 0.5/cos($pi/14*2);
q42_2 = 0.5/cos($pi/14*4);
q42_3 = 0.5/cos($pi/14*6);

q42a_1 = 0.5/cos($pi/14*2);
q42a_2 = 0.5/cos($pi/14*6);



@slider //----------------------------------------------------------------

p = slope_a_slider === 0 ? -1 : 1;



@sample //----------------------------------------------------------------

spl0.frequency_splitter(spl0);
spl1.frequency_splitter(spl1);

spl0 = spl0.L;
spl1 = spl1.L;
spl2 = spl0.M;
spl3 = spl1.M;
spl4 = spl0.H;
spl5 = spl1.H;
